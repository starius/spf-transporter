// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package transporterdb

import (
	"database/sql"
	"fmt"
)

type TransportType string

const (
	TransportTypeAirdrop  TransportType = "airdrop"
	TransportTypePremined TransportType = "premined"
	TransportTypeRegular  TransportType = "regular"
)

func (e *TransportType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransportType(s)
	case string:
		*e = TransportType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransportType: %T", src)
	}
	return nil
}

type AirdropTransport struct {
	BurnID        string
	SolanaAddress string
	SupplyAfter   int64
	SupplyBefore  sql.NullInt64
	BurnTime      sql.NullTime
	SolanaID      sql.NullString
}

type GlobalFlag struct {
	Name  string
	Value sql.NullBool
}

type PreminedLimit struct {
	Address     string
	AllowedMax  int64
	Transported sql.NullInt64
	Blocked     bool
}

type PreminedTransport struct {
	BurnID        string
	Address       string
	SupplyAfter   int64
	SupplyBefore  sql.NullInt64
	BurnTime      sql.NullTime
	SolanaAddress string
	SolanaID      sql.NullString
}

type QueueTransport struct {
	BurnID        string
	SolanaAddress string
	SupplyAfter   int64
	SupplyBefore  sql.NullInt64
	BurnTime      sql.NullTime
	QueueUp       sql.NullTime
	SolanaID      sql.NullString
}

type SolanaTransaction struct {
	ID               string
	BroadcastTime    sql.NullTime
	ConfirmationTime sql.NullTime
	Confirmed        bool
}

type UnconfirmedBurn struct {
	BurnID          string
	Amount          int64
	SolanaAddress   string
	PreminedAddress sql.NullString
	Height          sql.NullInt64
	Time            sql.NullTime
	TxType          TransportType
}
